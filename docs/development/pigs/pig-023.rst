. include:: ../../references.txt

.. _pig-023:

****************************************************
PIG 23 - Gammapy release cycle and version numbering
****************************************************

* Author: RÃ©gis Terrier, Axel Donath and ?
* Created: May 12th, 2022
* Accepted:
* Status:
* Discussion:

Abstract
========

This PIG proposes the general plan for timing of releases and their version numbers to start
with the release v1.0. Following the approach of astropy (described in APE 2), versions numbered
vX.0 are designated "long-term support" (LTS) and are released on typical timescales
of two years. New features releases have a shorter cycle of about 6 months and are numbered
X.Y (with Y>0). Bugfix releases are applied on both the current feature release and the LTS
releases when needed. The development procedure to implement this scheme is detailed.




Current status
==============

Until v0.20, Gammapy releases have mostly been new feature releases in order to
build complete set of functionalities with a stable API for the v1.0 release.
This approach and release cycles were described in the roadmap for
v1.0 PIG :ref:`pig-005`. Releases cycles have varied between every two months and
once a year. The six-month timescale has been found to most practical both for users
and developpers.

Version 1.0 is the first one that requires "long-term-support" (LTS) to allow
for users and facilities relying on Gammapy not to always upgrade to the
latest version while still having the guarantee that major bugs will be
corrected. Implementing this requires to precisely define the numbering scheme
and to specify the associated development plan in terms of calendar, workflow
(development branches), deprecation and backward compatibility. A first discussion
on this took place during January 2022 co-Corking week (link?).

Release scheduling and LTS
==========================

Following on the current scheme, a typical timescale between new feature releases is 6 months.
More rapid releases can occur when important new features are to be distributed to users.
Feature releases can introduce backwards incompatible changes w.r.t. previous versions.
Those changes have to be mentioned in the release notes.

In addition, bugfix releases can correct new feature versions.
A bugfix must neither introduce new major functionality nor break backwards compatibility in the
public API, unless the API has an actual mistake that needs to be fixed.
Documentation improvements can be part of a bugfix release. Bugfixes are
applied to the current feature release.

Finally, long-term support (LTS) releases will have a timescale of about 2 years (or about
3-4 feature releases) and will continue to receive bugfixes until the next LTS release.

Version numbering
=================

Gammapy will follow the astropy version scheme i.e. of the form ``x.y.z``, with typically::

* 1.0.0 (LTS release)
* 1.0.1 (bug fix release)
* 1.0.2
* 1.1.0 (six months after 1.0.0)
* 1.1.1 (bug fix release on the feature branch)
* 1.0.3 (bug fix release on the LTS)
* 1.1.2
* 1.2.0 (six months after 1.1.0)
* 1.2.1
* 1.3.0 (six months after 1.2.0)
* 1.0.4 (bug fix release on the LTS)
* 1.3.1 (bug fix release on the feature branch)
* 2.0.0 (LTS release, six months after 1.3.0)

Release preparation, feature freeze
===================================

Specify the typical calendar to prepare for a feature release?

To prepare for a new feature release. A feature freeze has to occur (when?).
From that point no new major feature is accepted for the coming release.
Minor improvements, bug fixes, or documentation additions are still acceptable.

No alpha or beta release ar expected for Gammapy. For testing purposes, a limited
release candidate can be distributed (is it necessary? systematic? only on Pypi?
how long before the actual release?)

A specific version branch is created with version numbering (e.g. v1.2).

Deprecation
===========

At least one feature release before removing some API?

Should Gammapy emit a deprecation warning?

Development workflow
====================

See astropy release workflow


Support of python Cython, numpy and astropy versions
====================================================

see [APE 18](https://github.com/astropy/astropy-APEs/blob/main/APE18.rst)
see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html)



Implementation
==============


Alternatives
============



Decision
========