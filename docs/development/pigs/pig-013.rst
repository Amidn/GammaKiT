.. include:: ../../references.txt

.. _pig-013:

**********************************************
PIG 13 - Gammapy dependencies and distribution
**********************************************

* Author: Christoph Deil, Axel Donath, RÃ©gis Terrier, Brigitta Sipocz
* Created: June 6, 2019
* Accepted: tbd
* Status: draft
* Discussion: `GH 2218`_

Abstract
========

Since Gammapy v0.7, released in Feb 2018, the recommended way to install
Gammapy and its dependencies has been via conda. This has worked well, allowing
us to ship a reproducible science tool environment with up-to-date versions to
all Gammapy users for each Gammapy release.

We discussed alternative Gammapy distribution channels (pip, Macports, Linux
package managers, ...) and ways to ship the full environment to users
(metapackages, extras_require, ...), but after consideration, we propose to
continue shipping the upcoming Gammapy v0.14, v0.15, v1.0 in the same way, via a
conda ``environment.yml`` file distributed via gammapy.org for each Gammapy
release as the one fully supported way to install Gammapy. Specifically we
suggest to remove the Macports installation page from the Gammapy docs.

We propose to take advantage of the good situation concerning distribution, and
to require recent versions of required and optional dependencies of Gammapy as
listed below, e.g. Python 3.6, Numpy 1.16 and Astropy 3.2. We think this change
will have very little impact on users (zero impact for most), but it will allow
us to develop Gammapy more quickly by taking advantage of new features and it
will significantly reduce the effort on maintenance and testing.

This PIG will benefit from user feedback. If you use or want to use Gammapy, but
what is described here doesn't work well for you, let us know!

Introduction
============

In recent years, the Python packaging and distribution system has improved a
lot. Thanks to conda, we now have a way to ship up-to-date versions of Gammapy
and all its dependencies in a dedicated environment for each version on all
supported platforms, and the number of installation issues reported by users has
been very low in recent years.

Required and optional dependencies
----------------------------------

Given this situation, we feel that it is OK to drop support for old versions
(most notably Python 2.7, see :ref:`pig-003`), and to change a few Gammapy
dependencies from "optional" to "required".

Technically, the difference is that a required dependency is in the
``install_requires`` list in ``setup.py``, which means that ``pip install
gammapy`` will install it, whereas optional dependencies are not listed there,
and ``pip install gammapy`` will not automatically install them. Another
distinction is that required dependencies are imported at the top of Gammapy
modules, which means that import of some Gammapy sub-package such as e.g.
``import gammapy.detect`` will often fail should that dependency not be
installed (which usually doesn't happen, unless users do uncommon things like
e.g. ``pip uninstall scipy`` after ``pip install gammapy``, that would lead to a
non-working Gammapy installation). Initially we only had Numpy and Astropy as
required dependencies, by now we have added Scipy (in `GH 1863`_), PyYAML, click
and regions as required dependencies. We are still very careful and conservative
concerning dependencies, e.g. we removed the use of `scikit-image`_ (in  `GH
1658`_) because really ``scipy.ndimage`` contains everything we need, and also
e.g. ``h5py`` and ``pandas`` and ``ROOT`` and a few other optional dependencies
that were only used in one or two functions in prototype code were removed (see
e.g. `GH 1586`_).

Most users don't know or care about ``setuptools`` and ``install_requires``,
what they want is a Python environment that contains everything needed to run
analyses with Gammapy, including e.g. ``matplotlib``, ``iminuit``, HEALPix
support, ``ipython`` and ``jupyter``. For this we have a solution to install
Gammapy and a set of "recommended" optional dependencies, described below.

Motivation
----------

As mentioned already in :ref:`pig-013`, there is always a benefit and a cost to
supporting old versions. In a few sections below we highlight some of the
benefits and costs for different dependencies specifically, but generally we
feel that the benefits of the changes proposed here are significant. Much
reduced testing and maintenance effort, new features and fixes and performance
improvements in dependencies become available, while the benefits of keeping
support for older versions is very small, since most Gammapy users use the
recommended conda environment, which already ships very modern and recent stack
and is mostly unchanged in this proposal. Especially the ``astropy-regions`` and
``astropy-healpix`` packages are still under active development, and supporting
old versions from 2018 or 2017 would be painful, and if we decide to require
very recent versions of those packages (from releases in summer 2019), the
motivation to support very old versions of other dependencies (most notably
Astropy, but also e.g. Numpy or Scipy or Matplotlib) is small.

conda does provide a complete solution to ship Gammapy to users on all
platforms. E.g. for the Fermi tools it's the only supported distribution
channel. The addition of binary wheels for pip described below should be
considered an experiment. This is the standard way to distribute Python
packages, and some users prefer it over conda, and work on this has already
started by the Astropy folks, so we'd like to try it out. We might or might not
support this for the coming years.

Required dependencies
=====================

We propose to update the Gammapy required dependencies as shown in the following
table (the release dates for the packages are shown in parentheses are were
obtained from https://pypi.org/). A definition of required dependency is given
above in the introduction, notes on each required dependency are given below
after the table.

===============  ================  ================
Dependency       Gammapy 0.12      Gammapy 0.14
===============  ================  ================
Python           3.5   (Sep 2015)  3.6   (Dec 2016)
Numpy            1.10  (May 2016)  1.16  (Jan 2019)
Scipy            0.15  (Jan 2015)  1.2   (Dec 2018)
Astropy          2.0   (Jul 2017)  3.2   (Jun 2019)
regions          0.3   (Sep 2018)  0.5   (Jul 2019)
pyyaml           unclear           3.13  (Jul 2018)
click            unclear           7.0   (Sep 2018)
===============  ================  ================

We already mentioned the possibility to drop Python 3.5 support in
:ref:`pig-003`. One reason is that Anaconda and conda-forge (our main
distribution channel, used in our testing continuous integration setup) only
contains Python 2.7, 3.6 and 3.7 at this point (and 3.8 added in fall 2018),
i.e. testing on Python 3.5 is already extra effort. Also, Python 3.6 contains
some nice new features that developers can use. E.g. Sunpy or ctapipe already
require Python 3.6 or later.

This update is to very recent versions for dependencies. We could keep support
for older versions, e.g. Numpy 1.13 (Jun 2017), Scipy 1.0  (Oct 2017) and
Astropy 3.0 (Feb 2018) or even older. But it wasn't clear to us if doing so
would be of use to anyone, so we defaulted to this proposal.

For Astropy, we could keep support for version 2.0, but there are many small new
features, fixes and performance improvements in 3.0, 3.1 and 3.2 (see `Astropy
whatsnew`_) that will make our life easier, for example much improved
Quantity-support for functions in Numpy and Scipy, support for the FITS time
standard and better support for Time columns in Table, the new
``astropy.uncertainty`` package which we could use (see :ref:`pig-14`_), the
``SkyCoord.directional_offset_by`` method for field of view coordinates, common
WCS API, the new ``astropy.timeseries``, ASDF.

A major motivation to update to very recent versions is that the ``regions``
package is still under development (see :ref:`pig-010`_). In Gammapy 0.13 we
require regions 0.4, and we plan to make a regions 0.5 release with further
features and fixes in July, and to require that for Gammapy 0.14.

We currently have ``pyyaml`` as required dependency for YAML I/O. We don't use
it much yet within Gammapy, only for one or two helper methods to serialise fit
results, and for ECSV table I/O, e.g. for spectral points. However, we have been
considering for a while to develop a YAML-based model serialisation or
YAML-based config files, and then YAML will be needed for most Gammapy users and
makes sense as a required dependency. There is a possible alternative we could
use, ``ruamel_yaml``, which is discussed in the alternatives section below.

The current Gammapy command line interface is using ``click``. Whether to keep
this or whether to use something else will be discussed in `PIG 12`_. For now,
we propose to keep things as-is, and only specify a minimum version that we'll
test, although in practice we didn't have any version-dependent issues with
``click`` in the past years.

Optional dependencies
=====================

We propose to update the Gammapy optional dependencies as shown in the following
table (the release dates for the packages are shown in parentheses are were
obtained from https://pypi.org/). An explanation of optional dependency is given
above in the introduction, and the sections on distribution and outlook below
contain further information concerning the set of recommended optional
dependencies for Gammapy.

===============  ================  ================
Dependency       Gammapy 0.12      Gammapy 0.14
===============  ================  ================
ipython          7.3   (Feb 2019)  7.6   (Jun 2019)
jupyter          1.0   (n/a)       1.0   (n/a)
jupyterlab       0.35  (Oct 2018)  1.0   (Jun 2019)             
matplotlib       2.1   (Oct 2017)  3.0   (Sep 2018)
pandas           0.24  (Jan 2019)  --
healpy           1.11              --
astropy-healpix  --                0.5   (Jul 2019)
reproject        0.4   (Jan 2018)  0.5   (Jun 2019)
uncertainties    3.0   (Aug 2016)  3.1   (May 2019)
iminuit          1.3   (Jul 2018)  1.3.7 (Jun 2019)
sherpa           4.11  (Feb 2019)  4.11  (Feb 2019)
naima            0.8   (Dec 2016)  0.8.3 (Nov 2018)
emcee            --                2.2   (Jul 2016)
corner           --                2.0   (May 2016)
===============  ================  ================

We will document for each dependency what it is and where we use it in the
Gammapy documentation, here we just add comments for some cases.

astropy-healpix
---------------

For HEALPix we propose to change from `healpy`_ to `astropy-healpix`_. An
initial exploration whether ``astropy-healpix`` has all the features we need has
already been done in `GH 1167`_, and the answer was yes, except for some
precision issues near the poles in ``astropy-healpix``, and differences in disk
query results. Work is ongoing in ``astropy-healpix`` to fix these issues, the
plan is to base it on a new HEALPix implementation developed at CDS (see
`astropy-healpix GH 128`_). The hope is that this becomes available by September
2019, and then we switch to ``astropy-healpix`` for Gammapy v0.14. We note that
this new implementation is written in Rust and building it for now requires a
Rust compiler, although if binaries are available, users and even Gammapy
developers will not need a Rust compiler, they just install the
``astropy-healpix`` binary. Long-term, we might want to port this Rust
implementation to C or Cython, which would make ``astropy-healpix`` equivalent
to most other C extensions in Astropy (WCSLIB, FITS, ERFA) and affiliated
packages (reproject, regions).

uncertainties
-------------

The question whether to keep using ``uncertainties`` or whether to replace it
with something else is not discussed here, but in `PIG 14`_.

Cython and Numba
----------------

We propose to keep using Cython, and to only re-consider to use Numba later.

Both Cython and Numba are nice options to speed up performance-critical
functions. For the past years we have been using Cython in Gammapy, but not
Numba yet. ctapipe recently introduced Numba. Really in Gammapy only 1% of the
code is in Cython, and that could be rewritten just using Numpy, we currently
don't really need it. However, the assumption is that we will need either Cython
or Numba long-term for the few % of performance-critical code in Gammapy where
Python & Numpy is not enough. 

The way forward concerning performance is to first implement key features in
Gammapy and a clean design, then measure on real-world use cases (see `GH
2275`_), and then to start to improve performance. For v0.14 and v1.0 we here
decide to stick with Cython (and to not allow Numba, and to not re-write our 1%
Cython code using just Numpy), and then after that and possible after a Numba
1.0 release, we'll re-consider it.

Other
-----

The versions given for ``ipython``, ``jupyter`` and ``jupyterlab`` are what we
ship in the default conda environment. While Gammapy is usually used
interactively from these tools, they aren't dependencies that we import and use
within Gammapy, so really Gammapy could also be used with any ipython version
that still works, i.e. going back several years. ``jupyter`` is something called
a metapackage, a Python package that doesn't contain any code, just lists
several other packages as dependencies, that's why the version number and
release date there doesn't apply.

``emcee`` is a small and simple MCMC sampling package that's commonly used in
astronomy. ``corner`` is a tiny Python package to visualise ``emcee`` results
with ``matplotlib``. In v0.12 we already introduced a tutorial notebook showing
how to use Gammapy with ``emcee`` to do a Bayesian analysis, but we forgot to
add it to the recommended conda environment. We propose to continue prototyping
MCMC sampling analyses in ``gammapy.utils.fitting`` (see `PIG 14`_) using
``emcee`` for now, and long-term to consider refactoring to use other more
performant sampling algorithms, e.g. Hamiltonian MCMC.

While ``pandas`` is very widely used in the scientific Python space, we
consistently use Astropy tables, that's why we suggest to remove it from the
list of optional dependencies of Gammapy.

With ``iminuit``, 1.3.7 is the first version that ships binary wheels. Since
building ``iminuit`` requires a C++ compiler and takes a minute, we require that
version, so that users get binaries.

``reproject`` is only wrapped in one method, ``WCSNDMap.reproject``, and not
used within Gammapy. It duplicates the ``WCSNDMap.interp`` functionality, the
extra feature it provides is a flux-preserving mode. We should either improve
the tests and documentation for this, or maybe consider to remove ``reproject``
completely, replacing it by a comment and usage example how to apply
``reproject`` in the documentation.

Distribution
============

Install with required or all dependencies
-----------------------------------------

For Gammapy, we currently have, and would like to continue to support installing
Gammapy either only with required dependencies, or with all dependencies. We
think that this is useful, e.g. if someone wants to use ``gammapy.maps`` as part
of an analysis pipeline, they might not need or want to install JupyterLab. But
most users want an easy way to get the full functionality, without having to
type pip or conda ``install gammapy jupyter jupyterlab matplotlib iminuit naima
...``, i.e. the list of "all" or "recommended" dependencies needs to be given
somewhere.

Currently we have both ``pip install gammapy`` and ``conda install gammapy`` to
install only the required dependencies. We suggest to keep it like that.
Changing those packages to contain "all" dependencies would mean that we'd have
to introduce new ``gammapy-core`` packages for the core install case. It seems
better to instead consider improving the "all" case in other ways (see sections
below).

conda
-----

For conda, we suggest to stick to the solution we have now for the "all"
included environment, which is to create for each release an environment
specification file like `gammapy-0.12-environment.yml`_ and to distribute that
via gammapy.org.

There is a good alternative (also mentioned below in the alternatives section),
which is to create a `conda metapackage`_ instead, which is what several other
projects do (see e.g. `fermitools conda meta.yaml`_, `glueviz conda meta.yaml`_
or `pysal`_). It's not clear to us if that is easier or harder to maintain, and
also for users if it's easier or harder to understand what version they get, and
how to update. Thus we default here to "keep what we have", unless during PIG
review comments arrive that make it clear that the metapackage is better.

pip
---

Currently ``pip install gammapy`` will install the required dependencies, and we
propose to keep that part as-is.

For the "all" dependencies use case - we propose to add an "all" key under
`extras_require in Gammapy setup.py`_ wo that users will be able to ``pip
install gammapy[all]``.

This is how e.g. Sunpy does it, see the `sunpy pip installation instructions`_
and their ``setup.py`` and ``setup.cfg``.

For this install to work well (without a compiler and fast), binary wheels have
to be available for Gammapy and all it's dependencies. The wheel binary package
format was introduced as a standard for Python packages in 2012 in `PEP 427`_.
Most Python projects create and distribute wheels (see
https://pythonwheels.com), including packages much more complex than Gammapy
like Numpy, Scipy, Tensorflow.

We propose to contribute to the new `astropy wheel-forge`_ effort a bit, and to
build and upload binary wheels for Gammapy, regions, reproject and
astropy-healpix for the supporting operating systems: Linux, macOS and Windows.
Depending on how well this works, we would advertise pip install to users (like
how Sunpy does it), or not mention it for now.

Macports
--------

We suggest to drop support for Macports, i.e. delete the `Installation with
Macports`_ page from the installation instructions.

As can be seen in the `Gammapy in Macports`_ history, the last update was to
Gammapy v0.7 in March 2018, and not a single user has complained that Gammapy
wasn't updated since.

It could be that there is still interest and Macports users, and they e.g. only
use it to install Python and our dependencies, and then on top of that install
Gammapy with pip. If you use Macports and want ``port install py37-gammapy``,
let us know!

Others
------

At this point, we have no plans to add and maintain Gammapy in HomeBrew (a
popular macOS and Linux package manager), or to provide Docker images.

For Linux distributions like e.g. Debian, we plan to give installation
instructions where Python and some dependencies are system-installed, and then
on top of that the rest is pip-installed. This will be a way for advanced users
to install Gammapy, and depends on how well the binary wheels work, for now the
one recommended way to install it on any platform will be conda.

Outlook
=======

This PIG describes only the status and very short term plan for Gammapy v0.14
and v1.0! We expect that things will evolve in the coming years to follow the
advancements in Python scientific computing, the scope of Gammapy and it's user
community, and the skills and manpower of the Gammapy developer team. E.g. we
might start using ``numba`` or ``dask`` or ``ray`` in the near future, or if
Tensorflow continues to mature and improve in the coming years (see ``jax`` and
``tensorflow-probability``), that could be considered for Gammapy.

After implementing this PIG we will follow up by improving Gammapy testing (`GH
2270`_) and by modernising the Gammapy packaging following the recommendations
in `APE 17`_. We plan to improve the test matrix to ensure that all supported
versions of dependencies work, and also that distribution works, by packaging
Gammapy and installing it with pip and conda and then executing the tests. This
is not considered controversial and thus not described in detail in this PIG.

Alternatives
============

Since we have a working setup already, we could do nothing, which seems nice at
first, but really means continued time sink and suffering by the Gammapy
maintainers of the continuous integration testing system and the release
manager.

The parts here that require a lot of work are ``astropy-healpix``,
``uncertainties`` and the binary wheels. If any of those parts gets stuck or we
don't have the manpower to do it, they can be done later, they aren't blockers
for v1.0.

For conda, we should strongly consider introducing a ``gammapy-all`` metapackage
instead of the current ``gammapy-environment.yml`` shipped via ``gammapy.org``.
That's what e.g. the Fermi tools and glueviz and others do, and they like that
solution. This could be done any time, that change is independent of the rest of
the changes described here.

We could support other ways to ship Gammapy, e.g. Homebrew (works on MacOS and
also Linux now), or Docker images (works anywhere).

For YAML support, the ``ruamel_yaml`` package is an alternative we could use
instead of ``pyyaml``. ``ruamel_yaml`` is a fork of ``pyyaml`` from a few years
ago, that has added support for YAML spec version 1.2 (``pyyaml`` only supports
YAML spec version 1.1). In practice the differences are very small, but one
annoyance is that with pyyaml ``4.2e3`` gets parsed as a string, and one has to
write ``4.2e+3`` to get the expected float type, when manually writing YAML.
``ruamel_yaml`` also has support for round-tripping including comments, which is
something that might be nice to have for Gammapy (e.g. to auto-generate or
programatically modify YAML config or model files). An important project using
``ruamel_yaml`` is ``conda``. The reason we prefer ``pyyaml`` is that it's been
stable for the past decade and we assume will be for the next, whereas with
``ruamel_yaml`` it's less clear how stable it is: they recently introduced a new
high-level API and plan to deprecate the old one, and are still pre v1.0. Even
more importantly: Astropy uses ``pyyaml`` heavily, e.g. for ECSV and ASDF I/O.
So if we adopted ``ruamel_yaml`` for Gammapy, then we'd effectively get both
YAML packages as dependencies, doubling the chances for something to break in
the coming years.

Task list
=========

Following the Gammapy v0.13 release in July 2019, the following changes should
be made, which will ship to users in Gammapy v0.14 in September 2019:

- Maybe: update Gammapy packaging and dev tools to follow new recommendations in `APE 17`_.
  There's some advantages to doing this first, to make it easier to define the
  new CI test matrix, but this could also come later.
- Update continuous integration test matrix to test against the minimum required
  versions as specified here (and also newer versions in addition) (`GH 2270`_).
- Drop Python 3.5 support and modernise codebase (e.g. use f-strings and use
  dict instead of OrderedDict).
- Review Gammapy codebase and remove workarounds for old Python, Numpy, Astropy,
  ... versions.
- Update ``extras_require`` in ``setup.py``. Try moving the spec out of
  ``setup.py`` to ``setup.cfg`` or ``pyproject.toml``.
- Review, restructure and update all Gammapy installation instructions
- Change ``astropy-healpix`` to the CDS implementation, release a stable version and
  check conda and pip binaries (`astropy-healpix GH 128`_)
- Change Gammapy from ``healpy`` to ``astropy-healpix`` (`GH 1167`_)
- Add binary wheels for gammapy, regions, reproject and astropy-healpix on PyPI,
  then add Gammapy CI build testing ``pip install gammapy[all]``
- After releasing Gammapy v0.14, update Gammapy ``conda-forge`` recipe, and do
  extensive testing before announcing to users. Maybe define some Dockerfiles
  that install from scratch from the user's perspective, to be used for
  post-release checks?


Decision
========

tbd

.. _GH 1167: https://github.com/gammapy/gammapy/pull/1167
.. _GH 1245: https://github.com/gammapy/gammapy/issues/1245
.. _GH 1586: https://github.com/gammapy/gammapy/pull/1586
.. _GH 1658: https://github.com/gammapy/gammapy/pull/1658
.. _GH 1863: https://github.com/gammapy/gammapy/pull/1863
.. _GH 2218: https://github.com/gammapy/gammapy/pull/2218
.. _GH 2270: https://github.com/gammapy/gammapy/issues/2270
.. _GH 2275: https://github.com/gammapy/gammapy/issues/2275
.. _PIG 12: https://github.com/gammapy/gammapy/pull/2219
.. _PIG 14: https://github.com/gammapy/gammapy/pull/2255
.. _APE 17: https://github.com/astropy/astropy-APEs/pull/52
.. _PEP 427: https://www.python.org/dev/peps/pep-0427/
.. _astropy-healpix GH 128: https://github.com/astropy/astropy-healpix/issues/128
.. _Astropy whatsnew: https://docs.astropy.org/en/stable/whatsnew/
.. _astropy wheel-forge: https://github.com/astropy/wheel-forge
.. _astropy-healpix: http://astropy-healpix.readthedocs.io/
.. _gammapy-0.12-environment.yml: https://github.com/gammapy/gammapy-webpage/blob/gh-pages/download/install/gammapy-0.12-environment.yml
.. _Installation with Macports: https://docs.gammapy.org/0.12/install/macports.html
.. _Gammapy in Macports: https://github.com/macports/macports-ports/commits/master/python/py-gammapy/Portfile
.. _pip requirements file: https://pip.pypa.io/en/stable/user_guide/#requirements-files
.. _extras_require in Gammapy setup.py: https://github.com/gammapy/gammapy/blob/fe8ca7d6caac77b8a31efc8bec3b21d09aacf6c1/setup.py#L115-L127
.. _conda metapackage: https://docs.conda.io/projects/conda-build/en/latest/resources/commands/conda-metapackage.html
.. _fermitools conda meta.yaml: https://github.com/fermi-lat/Fermitools-conda/blob/master/meta.yaml
.. _glueviz conda meta.yaml: https://github.com/conda-forge/glueviz-feedstock/blob/master/recipe/meta.yaml
.. _pysal: https://pysal.org/install
.. _sunpy pip installation instructions: https://docs.sunpy.org/en/stable/guide/installation/advanced.html