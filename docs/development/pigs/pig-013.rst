.. include:: ../../references.txt

.. _pig-013:

**********************************************
PIG 13 - Gammapy dependencies and distribution
**********************************************

* Author: Christoph Deil, Axel Donath, RÃ©gis Terrier, Brigitta Sipocz
* Created: June 6, 2019
* Accepted: tbd
* Status: draft
* Discussion: `GH 2218`_

Abstract
========

This is a proposal to make some updates concerning Gammapy dependencies and
supported distribution channels, to be introduced in Gammapy v0.14, and then to
be used in Gammapy v1.0.

Concerning Gammapy dependencies, given that we have a good way to ship
reproducible execution environments and recent versions of Gammapy and all
dependencies to users on all platforms via `conda`_ and `pip`_, we suggest to
drop support for Python 3.5, and to increase the minimum supported version of
our dependencies. Below we give tables and comments that clarify which Gammapy
dependencies are required and which are optional, and what the minimum supported
version for each dependency is. Older versions often will work, but are not
tested by us.

Concerning Gammapy distribution, we suggest to try to build and distribute
Python binary wheels for Gammapy, regions, reproject and astropy-healpix for
Linux, macOS and Windows, and to create a pip ``requirements.txt`` file that is
equivalent to the conda ``environment.yml`` file we already have. This will make
the installation instructions for ``pip`` and ``conda`` equivalent, in both
cases environments in the user's home directory are used and installation is
very easy and fast, no C compiler or admin privileges needed on the user
machine. We suggest to remove the extensive installation instruction page for
Macports from the Gammapy docs, and to not include Macports, HomeBrew or Linux
distributions in the distribution channels that are maintained by the Gammapy
team.

The main reason to write a PIG for this is to give everyone an opportunity to
give feedback. We will announce this on the Gammapy user list, but not run a
dedicated user survey. Let us know what you need and want!

Introduction
============

In recent years, the Python packaging and distribution system has improved a
lot. Thanks to conda, we now have a way to ship up-to-date versions of Gammapy
and all dependencies on all supported platforms, the number of installation
issues reported by users has been very low in recent years.

Required and optional dependencies
----------------------------------

Given this situation, we feel that it is OK to drop support for old versions
(most notably Python 2.7, see :ref:`pig-003`), and to change a few Gammapy
dependencies from "optional" to "required".

Technically, the difference is that a required dependency is in the
``install_requires`` list in ``setup.py``, which means that ``pip install
gammapy`` will install it, whereas optional dependencies are not listed there,
and ``pip install gammapy`` will not automatically install them. Another
distinction is that required dependencies are imported at the top of Gammapy
modules, which means that import of some Gammapy sub-package such as e.g.
``import gammapy.detect`` will often fail should that dependency not be
installed (which usually doesn't happen, unless users do uncommon things like
e.g. ``pip uninstall scipy`` after ``pip install gammapy``, that would lead to a
non-working Gammapy installation). Initially we only had Numpy and Astropy as
required dependencies, by now we have added Scipy (in `GH 1863`_), PyYAML, click
and regions as required dependencies. Still, we are careful and conservative
concerning dependencies. E.g. we removed the use of `scikit-image`_ (in  `GH
1658`_) because really ``scipy.ndimage`` contains everything we need, and also
e.g. ``h5py`` and ``pandas`` and ``ROOT`` and a few other optional dependencies
that were only used in one or two functions in prototype code were removed (see
e.g. `GH 1586`_).

Most users don't know or care about ``setuptools`` and ``install_requires``,
what they want is a Python environment that contains everything needed to run
analyses with Gammapy. For this we have the pre-defined conda and pip environent
specifications (see below). Those contain many optional dependencies, but they
don't contain everything some users might want to use. E.g. ``matplotlib`` and
``jupyter`` and ``sherpa`` is included there, but ``pandas`` or ``pint`` for
pulsar analysis isn't. Users can use ``conda`` or ``pip`` to install what they
need in addition, the assumption is that those package managers work very well
already, and keep getting better.

Motivation
----------

As mentioned already in :ref:`pig-013`, there is always a benefit and a cost to
supporting old versions. In a few sections below we highlight some of the
benefits and costs for different dependencies specifically, but generally we
feel that the benefits of the changes proposed here are significant. Much
reduced testing and maintenance effort, some new features become available,
while the benefits of keeping support for older versions is very small, since
most Gammapy users use the recommended conda environment, which already ships
very modern and recent stack and is mostly unchanged. Especially the
``astropy-regions`` and ``astropy-healpix`` packages are still under active
development, and supporting old versions from 2018 or 2017 would be painful, and
if we decide to require very recent versions of those packages (from summer
2019), the motivation to support very old versions of other dependencies (most
notably Astropy, but also e.g. Numpy or Scipy or Matplotlib) is very small.

conda does provide a complete solution to ship Gammapy to users on all
platforms. E.g. for the Fermi tools it's the only supported distribution
channel. The addition of binary wheels for pip should be considered an
experiment. This is the standard way to distribute Python packages, and some
users prefer it over conda, and work on this has already started by the Astropy
folks, so we'd like to try it out. We might or might not support this for the
coming years.

Required dependencies
=====================

We propose to update the Gammapy required dependencies as shown in the following
table (the release dates for the packages are shown in parentheses are were
obtained from https://pypi.org/). A definition of required dependency is given
above in the introduction, notes on each required dependency are given below
after the table.

===============  ===============  ===============
Dependency       Gammapy 0.12     Gammapy 0.14
===============  ===============  ===============
Python           3.5  (Sep 2015)  3.6  (Dec 2016)
Numpy            1.10 (May 2016)  1.16 (Jan 2019)
Scipy            0.15 (Jan 2015)  1.2  (Dec 2018)
Astropy          2.0  (Jul 2017)  3.2  (Jun 2019)
regions          0.3  (Sep 2018)  0.5  (Jul 2019)
pyyaml           unclear          3.13 (Jul 2018)
click            unclear          7.0  (Sep 2018)
===============  ===============  ===============

We already mentioned the possibility to drop Python 3.5 support in
:ref:`pig-003`. One reason is that Anaconda and conda-forge (our main
distribution channel, used in our testing continuous integration setup) only
contains Python 2.7, 3.6 and 3.7 at this point (and 3.8 added in fall 2018),
i.e. testing on Python 3.5 is already extra effort. Also, Python 3.6 allows us
to use f-strings and just dict instead of a mix of dict and OrderedDict like we
have now, it's nice for developers. E.g. Sunpy or ctapipe already require Python
3.6 or later.

This update is to very recent versions for dependencies. We could keep support
for older versions, e.g. Numpy 1.13 (Jun 2017), Scipy 1.0  (Oct 2017) and
Astropy 3.0 (Feb 2018) or even older. But it wasn't clear to us if doing so
would be of use to anyone, so we defaulted to this proposal.

For Astropy, we could keep support for version 2.0, but there are many small new
features, fixes and performance improvements in 3.0, 3.1 and 3.2 (see `Astropy
whatsnew`_) that will make our life easier, for example much improved
Quantity-support for functions in Numpy and Scipy, support for the FITS time
standard and better support for Time columns in Table, the new
``astropy.uncertainty`` package which we could use (see :ref:`pig-14`_), the
``SkyCoord.directional_offset_by`` method for field of view coordinates, common
WCS API, the new ``astropy.timeseries``, ASDF.

A major motivation to update to very recent versions is that the ``regions``
package is still under development (see :ref:`pig-010`_). In Gammapy 0.13 we
require regions 0.4, and we plan to make a regions 0.5 release with further
features and fixes in July, and to require that for Gammapy 0.14.

The ``pyyaml`` package is the most-used YAML package for Python, used e.g. also
in Astropy core for ECSV or ASDF I/O. The ``click`` package was chosen to
implement the ``gammapy`` command line interface. For ``pyyaml`` and ``click``
we never had a version specified so far or a version-dependent issue reported,
i.e. any version from recent years worked. Still, to have well-defined testing
and support, we choose minimum required versions from 2018 here.

Optional dependencies
=====================

Environments
------------

The philosophy of Gammapy is to build on top of and collaborate with the
scientific Python stack, and to mostly avoid re-implementing functionality that
already exists. There are well over 100,000 Python packages available on
pypi.org, and well over 1000 astronomy packages. The beauty of Python is that
users can just install and import what they need and combine Gammapy with other
packages to implement their analysis, not everything needs to be built into
Gammapy.

So what exactly is an optional dependency of Gammapy and what isn't? Here we
consider packages as optional dependencies if they are imported within Gammapy
itself, or used in one of our tutorials. We already have an overview of which
packages those are, since this is basically the packages we added to our conda
environment files like `gammapy-0.12-environment.yml`_ which are the recommended
way to install and use Gammapy.

So far we had also put `extras_require in Gammapy setup.py`_ to define
``analysis`` and ``plotting`` extras that could be installed via ``pip install
gammapy[analysis]`` or ``pip install gammapy[plotting]`` or ``pip install
gammapy[analysis,plotting]``, but that was never documented in the installation
instructions or advertised to users. We think that the single environment
specification is sufficient for Gammapy - it gives users a recommended set of
packages so that everything in Gammapy or any tutorial works, and the list of
packages there is not too long so that e.g. installation time or size would be a
concern. So one proposal we make here is to remove the ``extras_require`` key in
``setup.py`` for Gammapy.

In addition to the conda environment, we propose to add an equivalent `pip
requirements file`_ from now on, i.e. in addition to
``gammapy-0.14-environment.yml`` we would make a
``gammapy-0.14-requirements.txt`` file so that users that prefer Python virtual
envs and pip will be able to install Gammapy with the set of recommended
dependencies like this::

    python -m venv gammapy-0.14
    source gammapy-0.14/bin/activate

    curl -O https://gammapy.org/download/install/gammapy-0.14-requirements.txt
    pip install -r gammapy-0.14-requirements.txt

In previous discussions (e.g. `GH 1245`_) it was argued that it would be nice if
``conda install gammapy`` and ``pip install gammapy`` installed basically
everything that is commonly needed, i.e. included the optional dependencies. One
way to do this would be to make all dependencies required, which we don't want
to do because it would make it harder for other packages or projects to install
a smaller subset. This is often annoying, e.g. currently ``naima`` lists
``h5py`` as a dependency in ``install_requires`` in ``setup.py``, which means
that any project that depends on Naima will install the big HDF5 library, even
though it's only used in an example to store something which could just as well
be stored in a FITS file, i.e. most users will not need it. Another way to
achieve this is to use a metapackage, which is a collection of other packages,
very similar to ``requirements.txt``, just as a Python package on PyPI. E.g.
https://pypi.org/project/jupyter/ is a metapackage, but overall this is not
widely used by Python projects. For conda it's also possible to create basically
a metapackage, this was done e.g. in `fermitools conda meta.yaml`_ for the Fermi
tools. For Gammapy it would mean we'd have to change to a different package
name, e.g. ``gammapy-core``, to make room for ``gammapy`` to be the metapackage,
or to add a metapackage with a name like e.g. ``gammapy-recommended`` or
``gammapy-all`` or ``gammapy-tools`` or some name in that vein. This has the
advantage that the env spec is distributed via a channel (anaconda.org or
pypi.org) that conda or pip know about natively, i.e. it's non necessary any
more to start the process by downloading the env spec file from gammapy.org.
However, we suggest to stick to ``gammapy`` as a package with a very small set
of dependencies, and then use the environment specifications to create the stack
and execution environment that most users want, not metapackages for now.

Packages
--------

Here's the list of optional dependencies for Gammapy:

===============  ===============  ===============
Dependency       Gammapy 0.12     Gammapy 0.14
===============  ===============  ===============
ipython=7.5      7.3              7.5
jupyter          1.0              1.0?
jupyterlab       0.35             
healpy           1.11             --
astropy-healpix  --               0.5 (Jul 2019)
matplotlib       2.1 (Oct 2017)   3.0 (Sep 2018)
reproject

  - pyyaml=5.1
  - click=7.0
  - numpy=1.16
  - scipy=1.3
  - pandas=0.24
  - matplotlib=3.1
  - astropy=3.1
  - regions=0.3
  - reproject=0.4
  - uncertainties=3.1
  - iminuit=1.3
  - sherpa=4.11
  - healpy=1.12
  - naima=0.8
==============  ===============  ===============

We will document what they are and what they are used for in the Gammapy
documentation, here we just add comments for some cases.

astropy-healpix
---------------

For HEALPix we propose to change from `healpy`_ to `astropy-healpix`_. An
initial exploration whether ``astropy-healpix`` has all the features we need
has already been done in `GH 1167`_.


Distribution
============

- Drop support for Gammapy distribution via Macports

Most Gammapy users use ``conda`` and binaries created via ``conda-forge``.
Sufficient or do we want to support other distribution channels?

Wheels
------

The wheel binary package format was introduced as a standard for Python packages
in 2012 in `PEP 427`_. Most Python projects create and distribute wheels (see
https://pythonwheels.com), including packages much more complex than Gammapy
like Numpy, Scipy, Tensorflow.

At this time, we don't plan to offer wheels for Gammapy, but to only distribute
source distributions ``sdist`` at https://pypi.org/project/gammapy/ .

The reason is that binary wheels need to be built for each supported platform,
and they need to be distributed via PyPI, i.e. to create them a set of scripts
or continuous delivery configuration has to be set up and maintained by the
package maintainers. This is contrary and more difficult to achieve than binary
conda packages, where conda-forge exists as a separate build infrastructure and
tooling that starts by taking the ``sdist`` from PyPI and then uploading the
conda packages to anaconda.org.

At this point, nothing as simple as conda-forge has emerged for wheels, so
different projects or small group of projects set up their own system, e.g
https://github.com/MacPython/astropy-wheels for Astropy or
https://iscinumpy.gitlab.io/post/azure-devops-python-wheels/ for iminuit and the
scikit-hep packages.

TODO: change this section to suggest to build wheels via `astropy wheel-forge`_
and support that for now.

Actually, there is one platform where binary wheels for Gammapy and all
dependencies exits already. If you ``pip install gammapy`` on Raspberry Pi,
you'll get binary wheels thanks to this guy:
https://www.raspberrypi.org/blog/piwheels/

Macports
--------

We suggest to drop support for Macports, i.e. delete the `Installation with
Macports`_ page from the installation instructions.

As can be seen in the `Gammapy in Macports`_ history, the last update was to
Gammapy v0.7 in March 2018, and not a single user has complained that Gammapy
wasn't updated since.

It could be that there is still interest and Macports users, and they e.g. only
use it to install Python and our dependencies, and then on top of that install
Gammapy with pip. If you use Macports and want ``port install py37-gammapy``,
let us know!

Others
------

- interest to add Homebrew packages?
- interest to 

Outlook
=======

A number of 

Alternatives
============


Task list
=========

In the following sections, we summarise what we have now (as of June 2019, in
Gammapy v0.12), and changes we propose to be made immediately after the Gammapy
v0.13 release in late July 2019, which will ship to users in Gammapy v0.14 in
September 2019.


Decision
========

tbd

.. _Astropy whatsnew: https://docs.astropy.org/en/stable/whatsnew/
.. _astropy wheel-forge: https://github.com/astropy/wheel-forge
.. _astropy-healpix: http://astropy-healpix.readthedocs.io/
.. _GH 1167: https://github.com/gammapy/gammapy/pull/1167
.. _GH 1245: https://github.com/gammapy/gammapy/issues/1245
.. _GH 1586: https://github.com/gammapy/gammapy/pull/1586
.. _GH 1658: https://github.com/gammapy/gammapy/pull/1658
.. _GH 1863: https://github.com/gammapy/gammapy/pull/1863
.. _GH 2218: https://github.com/gammapy/gammapy/pull/2218
.. _GH 1658: https://github.com/gammapy/gammapy/pull/1658
.. _gammapy-0.12-environment.yml: https://github.com/gammapy/gammapy-webpage/blob/gh-pages/download/install/gammapy-0.12-environment.yml
.. _Installation with Macports: https://docs.gammapy.org/0.12/install/macports.html
.. _Gammapy in Macports: https://github.com/macports/macports-ports/commits/master/python/py-gammapy/Portfile
.. _PEP 427: https://www.python.org/dev/peps/pep-0427/
.. _pip requirements file: https://pip.pypa.io/en/stable/user_guide/#requirements-files
.. _extras_require in Gammapy setup.py: https://github.com/gammapy/gammapy/blob/fe8ca7d6caac77b8a31efc8bec3b21d09aacf6c1/setup.py#L115-L127
.. _fermitools conda meta.yaml: https://github.com/fermi-lat/Fermitools-conda/blob/master/meta.yaml