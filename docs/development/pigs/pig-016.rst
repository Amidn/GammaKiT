.. include:: ../../references.txt

.. _pig-016:

**********************************
PIG 16 - Gammapy package structure
**********************************

* Author: Christoph Deil, Axel Donath, RÃ©gis Terrier
* Created: July 5, 2019
* Status: draft
* Discussion: `GH 2274`_

Abstract
========

Gammapy is currently (as of v0.13 in July 2019) structured into 14 sub-packages.
Six of those are further structured into sub-sub-packages: utils, spectrum,
image, cube, astro, time. Here we show the structure of the Gammapy package and
consider possible changes to improve it.

For Gammapy v0.14 in September 2019 (and same for v1.0), we propose the following changes:

- move gammapy.utils.fitting to gammapy.modeling, and to move all models from
  spectrum, image, cube and time to gammapy.modeling.models
- dissolve gammapy.background, moving it's functionality into gammapy.spectrum
  and gammapy.cube
- dissolve gammapy.image, moving the useful functionality to gammapy.maps and
  gammapy.cube.
- Clean up gammapy.utils sub-packages
- Refactor end-to-end analysis tests to gammapy.scripts, using the new high-level
  API

After Gammapy v1.0, we propose to continue discussion on other changes
considered while writing this PIG, described in the outlook section.

Status
======

The current Gammapy package structure (as of v0.13):

.. image:: pig-016-gammapy-package-organisation-status.png
   :alt: Gammapy package structure status (v0.13)

This illustrates the namespaces where the Gammapy API is exposed. The number of
Python files is much larger (about 100) and not important for the end-user API.

Proposal
========

We propose to introduce gammapy.modeling and gammapy.modeling.models, to
dissolve gammapy.background and gammapy.image in the v0.14 development cycle,
resulting in the following package structure for Gammapy v0.14 and v1.0:

.. image:: pig-016-gammapy-package-organisation-proposal.png
   :alt: Gammapy package structure proposal (v0.14)

The following sections explain and motivate the proposed changes.

Introduce gammapy.modeling
--------------------------

Currently our fitting and modeling framework is in gammapy.utils.fitting,
and the built-in models in Gammapy are distributed like this:

- gammapy.spectrum.models -- 1D spectral models
- gammapy.image.models -- 2D spatial models
- gammapy.cube.models -- 3D cube models
- gammapy.time.models -- 1D time models

Our proposal is to create a new gammapy.modeling and restructure like this:

- gammapy.utils.fitting -> gammapy.modeling.fitting
- gammapy.utils.serialisation -> gammapy.modeling.serialisation
- gammapy.spectrum.models -- gammapy.modeling.models.spectrum
- gammapy.image.models -- gammapy.modeling.models.image
- gammapy.cube.models -- gammapy.modeling.models.cube
- gammapy.time.models -- gammapy.modeling.models.time

We propose to change all models to include "Spectral", "Spatial", "Cube" and
"Time", and to expose them in one namespace: gammapy.modeling.models We also
plan to add factory functions and a YAML format to make it easy to make models,
i.e. very often users will not have to type many, many class names. For the
fitting and serialisation framework, we propose to expose it in the
gammapy.modeling namespace, unless that causes circular import issues, then we
would keep it in gammapy.modeling.fitting and gammapy.modeling.serialisation
only.

The motivation for this change is weak, but in discussions at the Erlangen
coding sprint most Gammapy developers preferred it. The reasoning is that it's
a bit easier to find and maintain models if they are all in one place.

There was a concern that this might introduce circular dependencies between
gammapy.modeling.models and e.g. gammapy.spectrum, gammapy.image, gammapy.cube
or gammapy.time. But in `GH 2290`_ it was shown that this is not the case, the
proposed change works well.

There is still the open question whether models will keep this simple interface,
or if we will add an evaluation caching layer, or whether eventually reduced
IRFs will become models. So it is very much possible that there will be other
changes concerning the Gammapy package structure in the future.

Dissolve gammapy.background
---------------------------

We propose to dissolve gammapy.background, and move the code like this:

* background_estimate.py, reflected.py, phase.py -> gammapy/spectrum
* ring.py -> gammapy/cube/background_ring.py

The motivation for this change is that currently map-related background
estimation code is split into gammapy/background and gammapy/cube without a
clear separation what goes where. So the choice was either to move everything to
dissolve gammapy.background or to move all background-related code to
gammapy.background.

Looking at the package structure illustration above, it's clear that
gammapy.background is problematic, because it is lower-level than
gammapy.spectrum and gammapy.maps, so moving background estimation classes from
gammapy.cube down to gammapy.background would likely lead to circular
dependencies, because they rely on the map dataset class in gammapy.cube.

The reflected region background code is not a great fit in gammapy/spectrum or
anywhere in Gammapy except for gammapy.background, but moving it there does make
sense if we say that all 1D spectrum code goes in gammapy.spectrum and all
map-related analysis code goes in gammapy.cube.

Dissolve gammapy.image
----------------------

The gammapy.image package was introduced early and contained a SkyImage class
for 2D sky images, and 2D image models, and some image analysis helper functions
such as code to make a radial profile from an image. Much later gammapy.maps was
introduced and we managed to support 2D and 3D maps with one container instead
of separate gammapy.image.SkyImage and gammapy.cube.SkyCube.

Now, if we move gammapy.image.models to gammap.modeling.models.image as proposed
above, and that SkyImage has been removed in 2018, there is very little
functionality left in gammapy.image, and it's not clear what it's scope is.

So we propose to clean this up, roughly like this:

- asmooth.py and utils.py -> move to gammapy.cube
- measure.py and profile.py -> replace with docs example or move to maps or cube?
- plotting.py -> replace with docs example or move to maps?

Clean up ``gammapy.utils``
--------------------------

Above we propose to move gammapy.utils.fitting, the biggest piece of
gammapy.utils to gammapy.modeling. We still need and want to keep gammapy.utils,
as a lowest-level layer in Gammapy where we write adapters and helpers for
functionality e.g. from Numpy and Astropy. Mostly this is for usage within
Gammapy, users very rarely need to import from gammapy.utils.

Checking via ``ack gammapy.utils tutorials | egrep -v fitting`` we see that
currently only energy_logspace, sqrt_space, sample_powerlaw and
SphericalCircleSkyRegion are used from end-user documentation, i.e. very little.

We propose to clean up gammapy.utils, e.g. gammapy/utils/coordinates.py still
contains coordinate helper functions that were added before astropy.coordinates
existed. We do not detail the cleanup here, this will be discussed on a
case-by-case basis. After that we will review what is left and decide whether we
keep or completely remove gammapy.utils from the Gammapy docs, i.e. if it's
public API or not.

Improve tests
-------------

Every sub-package in Gammapy has a tests folder where the corresponding tests
are located. In addition we have the tutorial notebooks under test (without
asserts), and there is `gammapy-benchmarks`_ where we have started to benchmark
the CPU and RAM usage of the most common high-level analyses.

We plan to add a high-level interface for Gammapy now (see `GH 2219`_). We
propose to review Gammapy tests, especially in gammapy.spectrum, gammapy.cube
and gammapy.time, and to move the end-to-end analysis tests to tests that
use the high-level interface.

Outlook
=======

During discussion of this PIG, several other ideas surfaced and were considered.
We don't propose those changes here and for v1.0, because discussion didn't
conclude on whether it's a good idea or not, and in some cases because
introducing the change would require a detailed dedicated PIG with a feasability
exploration as in `GH 2290`_ and then significant extra developments. We do
expect that some of these changes will be made in the future.

``gammapy.astro``
-----------------

``gammapy.astro`` and ``gammapy.catalog`` are independent from the rest of
Gammapy in the sense that they are not imported or used from elsewhere. Still,
they are useful, and they do import many things from Gammapy, e.g. the spectral
and spatial model classes. We will clean them up a bit, but they will remain
mostly as-is in Gammapy. Splitting them out isn't a good idea at this point, not
clear where they would go, and maintaining multiple repos is much harder than
one repo and their code would break immediately, since the Gammapy API isn't stable
yet.


gammapy.catalog
---------------

tbd

gammapy.image and gammapy.detect
--------------------------------


Also ``gammapy.detect`` and ``gammapy.time`` are mostly high-level and not used
from anywhere else (except possibly from ``gammapy.scripts`` soon. Therefore we
will not say much about them in this PIG.

Dissolve ``gammapy.image``, moving it's content to ``gammapy.cube``. The main
thing it contains is ``gammapy.image.models``, the rest is just a few
conveniences that could also be removed (e.g. to make profiles from images).
If we introduce ``gammapy.models`` then ``gammapy.image.models`` would go there.

We could rename ``cube`` to ``mapanalysis`` to make it clearer what it does?
Moving all of ``gammapy.image``, ``gammapy.background`` and ``gammapy.cube``
into ``gammapy.maps`` should be possible (all map-based data structures and
algorithms in one place). But this might introduce circular dependencies with
``spectrum```, which are currently avoided by having ``maps`` -> ``spectrum`` ->
``cube``, where ``cube`` can use things from ``spectrum``.

Similar to models, built-in dataset subclasses could be grouped in a new
``gammapy.datasets``. Although this might introduce circular dependencies within
Gammapy, it's less clear than for ``models`` if this is a good idea.

Generalising maps to allow maps without a WCS and spatial axes, and / or using
it everywhere in Gammapy (for IRFs, spectra, lightcurves) could be nice.
Possibly ALMA does this, all their data is in 4D containers with lon, lat,
wavelength, time, and e.g. a 1D spectrum would have only one bin in lon, lat,
time. This is something we should explore for Gammapy 2.0 in 2020, doesn't seem
feasible for Gammapy 1.0 in 2019.

Currently the fact that ``naima`` is a separate package is causing problems. We
can't add anything there, and we have to wrap the spectral models there, which
is inconvenient for us as developers, but mostly the issue is that users have to
learn two different modeling APIs to use Naima and Gammapy. We could pull
``naima`` into ``gammapy.astro.naima`` (or rename to ``gammapy.astro.radiation``
or something), or a separate good Python nonthermal modeling package might
appear and we interface or integrate that with Gammapy. For v1.0 we probaly
don't have enough time or manpower to pull it in. For now, we leave
``gammapy.astro`` and ``gammapy.catalog`` in Gammapy, but some people have
suggested to split it out from Gammapy, and in that sense pulling ``naima`` in
would be the wrong direction.

The relationship between ``gammapy`` and ``ctapipe`` is unclear. Not so much
functionality wise, but in terms of Python package dependency, i.e. who imports
from whom. We would benefit a lot from shared development, e.g. ``ctapipe`` has
a Tool / Component concept and provenance already, and Gammapy already has IRF
classes and sensitivity computation tools that are needed by the pipeline. We
just note this question here, for Gammapy v1.0 we don't propose to introduce any
coupling on our side, i.e. if we want to use something from ``ctapipe`` such as
the ``Tool`` class, we would put a copy in ``gammapy.extern`` to avoid the
dependency.

Task list
=========

tbd

Decision
========

tbd


.. _GH 2219: https://github.com/gammapy/gammapy/pull/2219
.. _GH 2274: https://github.com/gammapy/gammapy/pull/2274
.. _GH 2290: https://github.com/gammapy/gammapy/pull/2290
.. _gammapy-benchmarks: https://github.com/gammapy/gammapy-benchmarks