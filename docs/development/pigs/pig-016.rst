.. include:: ../../references.txt

.. _pig-016:

**********************************
PIG 16 - Gammapy package structure
**********************************

* Author: Christoph Deil, Axel Donath, RÃ©gis Terrier
* Created: July 5, 2019
* Status: draft
* Discussion: `GH 2274`_

Abstract
========

Gammapy is currently (as of v0.13 in July 2019) structured into 14 sub-packages.
Six of those are further structured into sub-sub-packages: utils, spectrum,
image, cube, astro, time. Here we show the structure of the Gammapy package and
consider possible changes to improve it.

For Gammapy v0.14 in September 2019 (and same for v1.0), we propose the following changes:

- move
gammapy.utils.fitting to gammapy.modeling, and to move all models from spectrum,
image, cube and time to gammapy.modeling.models

- dissolve
gammapy.background, moving it's functionality into gammapy.spectrum and
gammapy.cube

- dissolve gammapy.image

- We also propose to clean up gammapy.utils and restructure tests.

After Gammapy v1.0, we propose to consider larger changes, described in the
outlook section.

Status
======

The current Gammapy package structure (as of v0.13):

.. image:: pig-016-gammapy-package-organisation-status.png
   :alt: Gammapy package structure status (v0.13)

This illustrates the namespaces where the Gammapy API is exposed. the number of
Python files is much larger (about 100) and not so important.

Proposal
========

We propose to introduce gammapy.modeling and gammapy.modeling.models,
and to dissolve gammapy.background in the v0.14 development cycle.

.. image:: pig-016-gammapy-package-organisation-proposal.png
   :alt: Gammapy package structure proposal (v0.14)

Introduce gammapy.modeling
--------------------------

Introduce a gammapy.models package and group gammapy.spectrum.models,
gammapy.image.models, gammapy.cube.models and gammapy.time.models
there together. The gammapy.utils.fitting could be moved there or could stay
as-is, e.g. in Astropy they have astropy.modeling with the framework and
astropy.modeling.models with the many models.

Introducing this change was tried in `GH 2290`_, it works well at the moment.

We think having the separate sub-package gammapy.modeling can work, if
gammapy.maps vs gammapy.cube and gammapy.spectrum separation stays,
and if model evaluation, integration, sampling and caching remains in a form
where the model classes are loosely coupled to the other classes like e.g. the
datasets, i.e. having to import something from cube or spectrum in
gammapy.modeling is never or only very rarely needed.

Remove gammapy.background
-------------------------

We propose to remove gammapy.background, and to move reflected.py to gammapy.spectrum``,
and the other few things to ``gammapy.image`` or ``gammapy.cube``.

* background_estimate.py, reflected.py, phase.py -> gammapy.spectrum
* ring.py -> gammapy/cube/background_ring.py

This would mean that the dependency chain ``maps`` -> ``image`` ->
``background`` -> ``spectrum`` -> ``cube`` is resolved, making ``spectrum`` less
tightly coupled to the rest, mostly independent of ``image`` and ``cube``.


Clean up ``gammapy.utils``
--------------------------

tbd

Improve tests
-------------

Move code from ``gammapy-benchmarks`` here to achieve version coupling?

Move high-level tests into gammapy/tests or gammapy/scripts/tests

Outlook
=======

During discussion of this PIG, several other ideas surfaced and were considered.
We don't propose those changes here and for v1.0, because discussion didn't
conclude on whether it's a good idea or not, and in some cases because
introducing the change would require a detailed dedicated PIG with a feasability
exploration as in `GH 2290`_ and then significant extra developments. We do
expect that some of these changes will be made in the future.

``gammapy.astro``
-----------------

``gammapy.astro`` and ``gammapy.catalog`` are independent from the rest of
Gammapy in the sense that they are not imported or used from elsewhere. Still,
they are useful, and they do import many things from Gammapy, e.g. the spectral
and spatial model classes. We will clean them up a bit, but they will remain
mostly as-is in Gammapy. Splitting them out isn't a good idea at this point, not
clear where they would go, and maintaining multiple repos is much harder than
one repo and their code would break immediately, since the Gammapy API isn't stable
yet.


gammapy.catalog
---------------

tbd

gammapy.image and gammapy.detect
--------------------------------


Also ``gammapy.detect`` and ``gammapy.time`` are mostly high-level and not used
from anywhere else (except possibly from ``gammapy.scripts`` soon. Therefore we
will not say much about them in this PIG.

Dissolve ``gammapy.image``, moving it's content to ``gammapy.cube``. The main
thing it contains is ``gammapy.image.models``, the rest is just a few
conveniences that could also be removed (e.g. to make profiles from images).
If we introduce ``gammapy.models`` then ``gammapy.image.models`` would go there.

We could rename ``cube`` to ``mapanalysis`` to make it clearer what it does?
Moving all of ``gammapy.image``, ``gammapy.background`` and ``gammapy.cube``
into ``gammapy.maps`` should be possible (all map-based data structures and
algorithms in one place). But this might introduce circular dependencies with
``spectrum```, which are currently avoided by having ``maps`` -> ``spectrum`` ->
``cube``, where ``cube`` can use things from ``spectrum``.

Similar to models, built-in dataset subclasses could be grouped in a new
``gammapy.datasets``. Although this might introduce circular dependencies within
Gammapy, it's less clear than for ``models`` if this is a good idea.

Generalising maps to allow maps without a WCS and spatial axes, and / or using
it everywhere in Gammapy (for IRFs, spectra, lightcurves) could be nice.
Possibly ALMA does this, all their data is in 4D containers with lon, lat,
wavelength, time, and e.g. a 1D spectrum would have only one bin in lon, lat,
time. This is something we should explore for Gammapy 2.0 in 2020, doesn't seem
feasible for Gammapy 1.0 in 2019.

Currently the fact that ``naima`` is a separate package is causing problems. We
can't add anything there, and we have to wrap the spectral models there, which
is inconvenient for us as developers, but mostly the issue is that users have to
learn two different modeling APIs to use Naima and Gammapy. We could pull
``naima`` into ``gammapy.astro.naima`` (or rename to ``gammapy.astro.radiation``
or something), or a separate good Python nonthermal modeling package might
appear and we interface or integrate that with Gammapy. For v1.0 we probaly
don't have enough time or manpower to pull it in. For now, we leave
``gammapy.astro`` and ``gammapy.catalog`` in Gammapy, but some people have
suggested to split it out from Gammapy, and in that sense pulling ``naima`` in
would be the wrong direction.

The relationship between ``gammapy`` and ``ctapipe`` is unclear. Not so much
functionality wise, but in terms of Python package dependency, i.e. who imports
from whom. We would benefit a lot from shared development, e.g. ``ctapipe`` has
a Tool / Component concept and provenance already, and Gammapy already has IRF
classes and sensitivity computation tools that are needed by the pipeline. We
just note this question here, for Gammapy v1.0 we don't propose to introduce any
coupling on our side, i.e. if we want to use something from ``ctapipe`` such as
the ``Tool`` class, we would put a copy in ``gammapy.extern`` to avoid the
dependency.

Task list
=========

tbd

Decision
========

tbd


.. _GH 2274: https://github.com/gammapy/gammapy/pull/2274
.. _GH 2290: https://github.com/gammapy/gammapy/pull/2290