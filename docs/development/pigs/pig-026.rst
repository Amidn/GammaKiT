.. include:: ../../references.txt

.. _pig-026:

********************************
PIG 26 - Model Priors API 
********************************

* Author: Noah Biederbeck, Katrin Streil
* Created: ``2023-03-13``
* Accepted:
* Status: draft
* Discussion: `#4381`_

Abstract
========

This PIG is intended to introduce priors on models or on parameters that are evaluated during fitting.

Motivation
==========

Using priors on models or on parameters is the next step in full-fledged statistical analyses. 
A prior can incorporate the analysers' knowledge of the topic at hand or information about
the estimated IRFs systematics provided by the corresponding experiment, and yield more realistic and trustworthy results. 
The proposed formalism also includes the application of nuisance parameters and regularization.

Use cases
=========

In the past priors were a regularly requested feature or the solution to a problem.
See the following issues and PRs of Gammapy:

- Add sigma v estimator functionality for dark matter use case `#2075`_
- Background systematics as a nuisance parameter `#3955`_
- Support unfolding methods for spectral flux points `#4122`_
- Add PiecewiseNormSpatialModel `#4208`_

Implementation
==============

The following implementation draft is compatible with the current API,
where the models are set via Dataset.model and the Fit is run via Fit.run(datasets).

Prior (abstract) base class:
--------------

.. code:: python 

  class Prior():
  
     def __call__(self, base):
     
        if isinstance(base, Parameter):
            return self.evaluate(base.value)      
        else: # model-like instance
            return self.evaluate(base.parameters.value)  
         

Future additional properties of the ``Prior`` classes: 

- Fittable parameters
- Write/read from/to a yaml file, ideally also when the corresponding model is written/read (see serialisation example below)
- Prior registry system
- Prior subclass use cases (i.e. for correlated nuisance parameters with correlation matrix as a parameter)

Exemplary additional prior subclasses:
--------------
.. code:: python

  class GaussianPrior(Prior):
  
      """Gaussian Prior with mu and sigma set on a single parameter
      """
      
      def __init__(self, mu=0, sigma=1):
          self.mu = mu
          self.sigma = sigma

      def evaluate(self, value):
          return ((value - self.mu) / self.sigma) ** 2


.. code:: python

    class UniformPrior(Prior):
    
        """Uniform Prior set on a single parameter or model.
        """
        
        def __init__(self, uni=0):
            self.uni = uni

        def evaluate(self, value):
            return self.uni

.. code:: python 
  
    class CovarianceGaussianPrior(Prior):
        """Gaussian Priors on mulitple parameters with covariance matrix. Set on a model. 
        
        Parameters
        ----------
        cov : `~numpy.ndarray`
            Covariance matrix in the same order as the to be evaluated parameters.
        """
        tag = ["CovarianceGaussianPrior"]
        def __init__(self, cov):
            self.cov = cov
            
        def evaluate(self, values):
            from numpy import linalg
            return values @ linalg.inv(self.cov) @ values
        
        @property
        def prior_parameters(self):
            return [("cov", self.cov)]    
            
The prior classes are supposed to be set as ``.prior`` on:

* Model-like classes, for instance the ``SkyModel`` class:
  (for multi-parameter priors ``MultivariateGaussianPrior`` or ``UniformPrior``)
  
.. code:: python 
  
  class SkyModel(ModelBase):
  
      _prior = None

      @property
      def prior(self):
          return self._prior

      @prior.setter
      def prior(self, value):
          self._prior = value

      def prior_stat_sum(self):
          return np.sum(self._prior(self))


* the ``Parameter`` class (for priors like ``GaussianPrior`` or ``UniformPrior``)

.. code:: python 
  
  class Parameter:
  
      _prior = None

      @property
      def prior(self):
          return self._prior

      @prior.setter
      def prior(self, value):
          self._prior = value

      def prior_stat_sum(self):
          return np.sum(self._prior(self))
    
Fit Statistic:
--------------

All priors have to be combined and added to ``Datasets.stat_sum()`` during the fitting process. 

.. code:: python 

  class Datasets():
  
      def stat_sum(self):
          """Total statistic given the current model parameters."""
          stat = self.stat_array()
          
          if self.mask is not None:
              stat = stat[self.mask.data]
              
          return np.sum(stat, dtype=np.float64) + PriorFitStatistic(weight=1).stat_sum(models = self.models)
    
    
Where the ``PriorFitStatistic`` iterates the models and parameters, evaluates and combines the priors with the possibility to assign a weight.

.. code:: python 

 class PriorFitStatistic():
       
      def __init__(self, weight=1):
            self.weight = weight
  
      def stat_sum(self, models):
            stat= 0
            for m in models:
                if m.prior is not None:
                    stat += m.prior_stat_sum()
                for par in m.parameters:
                    if par.prior is not None:
                        stat += par.prior_stat_sum()
            return stat * self.weight

         
Serialisation 
--------------

The priors are serialised and read and writeable to a yaml file. They are also saved if the associated ``Parameter`` or ``Model`` is transformed to a dictionary. For this the prior subclasses are tagged. The following two examples show the resulting yaml file for a ``Parameter`` and a ``PowerLawSpectralModel``, respectively.

.. code-block:: yaml


  {'name': 'testpar',
   'value': 0.1,
   'unit': '',
   'error': 0,
   'min': nan,
   'max': nan,
   'frozen': False,
   'interp': 'lin',
   'scale_method': 'scale10',
   'is_norm': False,
   'prior': {'tag': 'GaussianPrior',
            'parameters': [{'name': 'mu', 'value': 0},
                           {'name': 'simga', 'value': 0.1}]}}

.. code-block:: yaml


  {'spectral': 
  {'type': 'PowerLawSpectralModel',
           'parameters': [{'name': 'index', 'value': 2.0},
                          {'name': 'amplitude', 'value': 1e-12, 'unit': 'cm-2 s-1 TeV-1'},
                          {'name': 'reference', 'value': 1.0, 'unit': 'TeV'}],
           'prior': {'tag': 'UniformPrior',
                     'parameters': [{'name': 'uni', 'value': 5.0}]}}}


(See `#4237`_ for an implementing PR draft.)




Additional Information
======================

It is possible to implement priors as well as FitStatistics simultaneously.
There will be two (default) FitStatistics: ``CashFitStatistic`` and ``WStatFitStatistic``,
on the ``SpectrumDataset`` and ``SpectrumDatasetOnOff``, resp.
This way priors and FitStatistics can share functionality, e.g. serialization, implementation.
(User defined) FitStatistics allow for fine-grained fitting of models.


Decision
========


.. _#2075: https://github.com/gammapy/gammapy/issues/2075
.. _#3955: https://github.com/gammapy/gammapy/issues/3955
.. _#4122: https://github.com/gammapy/gammapy/issues/4122
.. _#4208: https://github.com/gammapy/gammapy/issues/4208
.. _#4237: https://github.com/gammapy/gammapy/issues/4237
.. _#4381: https://github.com/gammapy/gammapy/issues/4381

