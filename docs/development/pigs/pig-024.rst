.. include:: ../../references.txt

.. _pig-024:

**************************
PIG 24 - Authorship policy
**************************

* Author: Bruno Kh√©lifi
* Created: May 25th, 2022
* Accepted:
* Status: draft
* Discussion:

.. contents:: Table of Contents
   :depth: 2

Abstract
========

While the Gammapy library is more widely used by the community, a proper citation of the project including
a policy about the authorship is necessary. This PIG addresses this issue by setting an authorship policy for the
Gammapy project for each type of product.

1. Introduction
===============

Gammapy started in 2013 and is now widely used in scientific publications. A proper citation scheme with correct authorship allows:

- a proper citation of the used Gammapy release,
- a proper recognition of the achieved work of any contributor,
- compliance with the FAIR principles for Research Software (`FAIR4RS <https://www.rd-alliance.org/group/fair-research-software-fair4rs-wg/outcomes/fair-principles-research-software-fair4rs>`_).

This PIG aims to set up the project policy about authorship for our citation scheme that is reminded here.

Given the fact that Gammapy is licensed under a 3-clause BSD style license (see gammapy/LICENSE.rst), Gammapy can be used
and even modified for a science project. For this modified version, the proposed authorship policy of this PIG is not
applicable but the general citation scheme should be applied.

This PIG is structured as follows: a reminder of our general citation scheme that was up-to-now only given orally and on
our web pages; then, the authorship policy is given for each of the products associated with Gammapy, namely the intermediate
releases, the Long Term Support (LTS) releases, the general Gammapy papers, and the contributions to the conference.

2. Reminder of the citation scheme
==================================

When Gammapy is used for any publication, contribution to conferences or software, authors should cite properly Gammapy.
It is asked to cite the DOI of the latest Gammapy paper.

.. note::
    As the Gammapy community fully supports Open Science, we strongly encourage authors using Gammapy to follow
    the FAIR4RS principles and to allow the reproducibility of their results. As consequence, we suggest always mentioning
    the `Zenodo <https://zenodo.org/>`_ DOI or the `HAL <https://hal.archives-ouvertes.fr/>`_ identifier (associated with
    the `Software Heritage <https://www.softwareheritage.org/>`_ archive) of the used release of Gammapy.

This scheme and these two references are precise on our web pages.

3. Authorship policy
====================

The Gammapy references contain a list of authors, or `contributors`, that requires to be updated with time according to a
general policy. This section defines what is a contributor to Gammapy and the policy for each type of product.

Definition of a `Contributor`
-----------------------------

Contributing to Gammapy can be made in different ways:

- contributing to gammapy source code,
- contributing to our documentation (rst pages, docstring, gammapy-webpage),
- contributing to our DevOps environment (CI, GitHub configurations, gammapy-docs, release processes, etc),
- contributing to our associated projects (gammapy-benchmarks, gammapy-data, gammapy-extra, gammapy-cat, gammapy-recipes),
- contributing to the maintenance of our repositories (conda-forge, PyPI, Zenodo, HAL, docker-hub, etc) or open hub (openhub, etc)
- leading the precise tasks identified by the Lead Developers,
- organizing and leading hands-on sessions or schools,
- managing our social media accounts,
- and, de-facto, the members of the Coordination Committee.

Any contribution on these topics renders the user as an official Gammapy contributor.

.. important::
    We strongly recommend that the contributors use always the same GitHub account, to have a unique
    `ORCID <https://orcid.org/>`_ identifier and store it into your GitHub user profile, and inform the developers
    of any change of affiliation.

As Gammapy is an open project, we encourage users to provide feedback on the usage of Gammapy, on features, on issues
via our communication channels.

Definition of the `Maintainer`
------------------------------

In the Open Source community, a maintainer is generally mentioned in the metadata associated with a release and has to be mentioned.
Usually, a software maintainer or package maintainer is one or more people who build source code into a binary package
for distribution, commit patches, or organize code in a source repository.

For Gammapy, by default, the maintainers are the Lead Developers. If in the future a task is dedicated to the creation
of a release, the maintainer will be the person in charge of this task.

Releases
--------

Each Gammapy release should be associated with an updated list of authors. The list of authors is composed by
people who contributed as listed in the previous sub-section to the current, and the previous release in
order to account for long contributions (e.g. management of depreciated features, improvement/debugging of features,
etc). Any additional author can be inserted into the list for its special contribution when requested by the Gammapy
Coordination Committee.

The order of the authors is first 'The Gammapy Collaboration', the Lead Developers, a past Lead Developer in case of
change between two releases, followed by the list of contributors in alphabetical order.

This policy is applied to any release after the LTS V1.0. For the releases made before, a hand-made list is used.
After the mention of 'The Gammapy Collaboration', the current Lead Developers will be in first, then the past Lead
Developers, followed by the list of contributors in alphabetical order.

Long Term Support releases
--------------------------

The list of authors is composed of the union of all the contributors of the releases realised up to the last LST
release. Any additional author can be inserted into the list for its special contribution when requested by the Gammapy
Coordination Committee.

The order of the authors is first 'The Gammapy Collaboration', the Lead Developers, a past Lead Developer in case of
change since the last LST, followed by the list of contributors in alphabetical order.

For the first LST release, the V1.0, all contributors from the beginning of the project will be co-authors. After the
mention of 'The Gammapy Collaboration', the Lead Developers will be in first, then the past Lead Developers since the
beginning of the project, followed by the list of contributors in alphabetical order.

General Gammapy publications
----------------------------

This product aims to describe the project and/or the library as a whole and is submitted to peer-review journals. As it
targets a wide community, the following scheme is used.

A/ List of authors

A.1/ By default, 'The Gammapy Collaboration' is mentioned first, then the Lead Developers, then the past Lead Developers since the
last general Gammapy publication, then the list of contributors of each release since the last Gammapy publication.

A.2/ If the editorial rules of the targeted journal permit it, the scheme used by the Astropy project
(e.g. `Astropy V2.0 <https://arxiv.org/pdf/1801.02634.pdf>`_) should be used in priority:

- 'The Gammapy Collaboration', and the list of primary paper contributors in order of contribution agreed per consensus with the development team and the Coordination Committee, as '(Primary Paper Contributors)'
- the members of the Coordination Committee, as '(Gammapy Coordination Committee)'
- the list of contributors of each release since the last Gammapy publication, ordered by alphabetical order, as '(Gammapy Contributors)'


A comment on the author list composition should be added. Extracted from the Astropy project, one can precise:

"The author list has three parts: the authors that made significant contributions to the writing of
the paper in order of contribution, the members of the Gammapy Project Coordination Committee,
and contributors to the Gammapy Project in alphabetical order. The position in the author list does not
correspond to contributions to the Gammapy Project as a whole. A more complete list of contributors
to the core package can be found in the package repository and at the Gammapy team webpage."

C/ The corresponding author is the 'Gammapy Coordination Committee', associated with its usual mailing list.

D/ Acknowledgement

One has the freedom to precisely mention acknowledgements associated with the publication. 
In practice, it is recommended to precise the grants or fellowships given to some authors.
One should in any case always acknowledge the Astropy project, to which we are affiliated.

Contributions in conferences
-----------------------------

The section concerns any contribution in conferences (a talk, a poster and their associated proceedings) related to
the Gammapy project itself. It does not concern a technical or scientific work that uses Gammapy as an open library.
In this case, the standard citation scheme should be used.

As the length of the author list is generally a constrain, the author list can be reduced to the shortlist of authors,
followed by 'The Gammapy Collaboration' associated with a link to the Gammapy team webpage.

If there is a corresponding author, the 'Gammapy Coordination Committee', associated with its usual mailing list, is
used. Concerning the acknowledgement, the Astropy project should always be mentioned.


4. Storage in metadata files
==================================

Depending on the software repository, different metadata files are used in the eco-system of Open Source research
software.

The file ``codemeta.json`` is used by Hal and Software Heritage, and recommended by
`ESCAPE <https://escape2020.pages.in2p3.fr/wp3/eossr/v0.3.2/metadata.html>`_ or
`EOSC <https://www.eosc-pillar.eu/news/illustrating-benefits-eosc-research-communities-germany>`_.

The file ``citation.cff`` is used by Zenodo and GitHub.

5. Possible implementation
==========================

In order to respect these rules, some automation is required to create the list of contributors. One could use
the Python library `Tributors <https://con.github.io/tributors/>`_. This library uses the GitHub API to determine the list of contributors, which is written in the
format associated with codemeta.json, citation.cff, zenodo.json. This kind of library allows then two requirements:
retrieve automatically the list of contributors from GitHub and write the authors list in all the needed formats.

One should note that the user profile of the GitHub platform does not contain a field associated with the ORCID identifier.
However, one could also retrieve the ORCID identifier of a contributor with the ORCID API
(e.g. `How-To-1 <https://stackoverflow.com/questions/71052912/extracting-credentials-from-orcid-seach-with-orcid-id-using-python>`_
or `How-To-2 <https://info.orcid.org/documentation/api-tutorials/api-tutorial-searching-the-orcid-registry/#easy-faq-2532>`_).

Even if this library is chosen, a specific Python script had to be written such that the authors' order follows these
rules. In this case, integration within a GitHub action could be possible.

6. Suggestions
==============

One could ask CTAO software coordinators (e.g. DPPS, ACADA) if such rules can be used by them also, even if the
The Gammapy project is independent. In the same spirit, advice could be asked to people of the ESCAPE project via our
corresponding person. And finally, one could mention the existence of these rules and ask for advice to the Astropy
project.

Decision
========

