.. include:: ../../references.txt

.. _pig-018:

**********************
PIG 18 - Documentation
**********************

* Author: Christoph Deil, Axel Donath, Jos√© Enrique Ruiz
* Created: Oct 16, 2019
* Status: draft
* Discussion: `GH 2463`_

Abstract
========

Over the past years the Gammapy package and documentation has grown organically,
at the moment there's a lot of duplicated and missing content, especially for
recently added functionality like datasets and the high-level interface. We
propose to spend significant effort to restructure and improve the Gammapy
documentation in Nov and Dec 2019, roughly following the plan outlined here.

Introduction
============

Gammapy started in 2013 and since then the package and documentation has
continuously evolved (see `Gammapy changelog`_). The oldest version of the
documentation that is still readily available online is for Gammapy v0.6 from
April 2017 (https://docs.gammapy.org/0.6). The current version of the
documentation is for Gammapy v0.14 from September 2019
(https://docs.gammapy.org/0.14/).

In 2018, following other projects such as Astropy or Sunpy, we created a
"project webpage" at https://gammapy.org which is not versioned and
hand-written, in addition to https://docs.gammapy.org which is versioned and
auto-generated by Sphinx. And we introduced a new setup for tutorials (written
as Jupyter notebooks, integrated into the Sphinx documentation) and ``gammapy
download`` as the way that users download versioned tutorial notebooks and example
datasets in a reproducible conda environment (see `pig-004`_, `ADASS XVIII proceedings`_).

Currently there are a 18 tutorial notebooks plus 7 listed as "extra topics").
Between the notebooks there is a lot of duplicated content, but on the other
hand there is also still a lot of missing documentation. E.g. recently
implemented large changes in Gammapy such as `pig-012`_ and `pig-016`_
are not completely documented yet. In addition to the Jupyter notebook
tutorials, we have RST documentation pages for each Gammapy sub-package. In some
cases there is a lot of content and examples (e.g. `maps`_ or
`modeling`_), in other cases there is only a sentence or two and the API
docs (e.g. `cube`_). The more technical documentation related with the API classes,
methods and objects is autogenerated from Python docstrings written in their code.

The tutorials usually have the following structure: introduction, setup, main
content, and sometimes at the end a summary, exercises or links to other
documentation. The sub-package RST pages usually have the following structure,
following the Astropy docs: Introduction (overview description), Getting Started
(first examples), Using (links to tutorials and sometimes sub-pages), API
reference

We will not discuss how other projects structure their documentation, but we did
look at and think it's useful to compare and contrast to figure out a good
documentation for Gammapy:

- https://www.tensorflow.org/tutorials/
- https://scikit-learn.org/stable/documentation.html
- https://jupyter.org/ and https://jupyterlab.readthedocs.io
- https://www.astropy.org/ and https://docs.astropy.org
- https://sunpy.org/ and https://docs.sunpy.org
- http://cxc.harvard.edu/sherpa/ and https://sherpa.readthedocs.io
- https://fermi.gsfc.nasa.gov/ssc/data/analysis/
- https://fermipy.readthedocs.io
- http://cta.irap.omp.eu/ctools
- https://www.djangoproject.com/ and https://docs.djangoproject.com

Generally one has to be aware that Gammapy is both a flexible and extensible
library with building blocks that experts can use to implement advanced
analyses, as well as a science tool package for IACTs (CTA, H.E.S.S.) with most
analysis use cases pre-implemented, that users just need to configure and run.
For some of the examples listed, that's also the case (e.g. JupyterLab), some
others (e.g. scikit-learn or Astropy) are just a library, and thus their
documentation is partly different.

Proposal
========

General Concept
---------------

We propose to mostly keep the existing Gammapy documentation setup, i.e. to
maintain part of the documentation in RST pages and another part in Jupyter
notebooks. We admit that there is no clear separation between the content of
both, but we give the following rough guidelines:

- More content should be moved to Jupyter notebooks. E.g. currently the RST pages for
  maps, modeling, catalog, detect, etc. have a few code examples. Those should
  be moved corresponding notebooks ``maps.ipynb``, ``modeling.ipynb``,
  ``catalog.ipynb`` and ``detect.ipynb``, i.e. in many cases there would be a
  hands-on tutorial introduction for each sub-package. More cross-links between
  IPYNB, RST and API docs should be created.
- Keep sub-package RST pages short and put links to relevant hands-on
  tutorials at the top, and the API docs at the bottom. Some pages have
  significant content, which is not related to code examples in between. E.g.
  for maps, modeling or IRFs there are is a description of the design.
- Add a Gammapy overview page to the RST docs, where the general data
  analysis concepts are explained (DL3, Datasets, Model, Fitting). This page
  would be similar to the description of Gammapy in the paper that we also plan
  to write now, and the same figures would be used for both.

Getting started
---------------

When a user visits https://docs.gammapy.org, they see the "Getting started"
heading. First we have Installation, then a Getting Started page (which we could
rename to First Steps), then the Tutorials. We suggest to add an Overview page
to that section before the tutorials, that's a 10 minute read and non-hands-on
introducion to Gammapy, but there tell people that they can skip to the hands-on
tutorial notebooks and come back to that page later if they prefer.
Then we would have a tutorials overview page similar to
https://docs.gammapy.org/0.14/tutorials.html but with some tutorials
added, removed and changed, as listed in the next section.

Tutorial notebooks
------------------

First analysis
~~~~~~~~~~~~~~

- Config-driven 1D and 3D analysis of Crab (evolution of current ``hess.ipynb``, renamed)
- A second notebook, with focus on extended source analysis,
  maybe showing the lower-level API with customisation options for background modeling?

What data can I analyse?
~~~~~~~~~~~~~~~~~~~~~~~~

The idea is to have one "starting page" for people from CTA, HESS and Fermi,
and possibly other instruments in the future.

- Observations and Datasets (to be implemented)
- HESS, mention DR1, show what the IRFs look like (to be implemented)
- CTA, mention prod3 and DC1, show what the IRFs look like  (``cta_data_analysis.ipynb``)
  Remove https://gammapy.org/cta.html (very few, and outdated infos).
  Better to have one starting page for CTA users instead of two
- Fermi-LAT, show how to create map and spectrum dataset using 3FHL example (``fermi_lat.ipynb``)

What analyses can I do?
~~~~~~~~~~~~~~~~~~~~~~~

- IACT data selection and grouping
- IACT 3D cube analysis (data reduction and fitting)
- IACT 2D image analysis (``image_analysis.ipynb``)
- IACT 1D spectrum analysis (data reduction and fitting)
- IACT light curve computation (``light_curve.ipynb``)
- Flux point fitting (``sed_fitting_gammacat_fermi.ipynb``)
- Binned simulation 1D / 3D (``spectrum_simulation.ipynb`` and ``simulate_3d.ipynb`` combined)
- Binned sensitivity computation (``cta_sensistivity.ipynb``)
- Naima model fitting (to be implemented)
- Joint Crab analysis using Fermi +  HESS + some flux poitns (to be implemented)

Gammapy package
~~~~~~~~~~~~~~~

For many Gammapy sub-packages, we plan to have a corresponding notebook
that is a hands-on, executable tutorial introduction that complements the
description and API docs on the sub-package RST page.

- Overview (short section with one example for each sub-package, hands-on, an evolution of the current ``getting_started.ipynb``)
- Maps (``gammapy.maps``) (``maps.ipynb``)
- Models (``gammapy.modeling.models``) (``models.ipynb``)
- Fitting (``gammapy.modeling``) (to be implemented)
- Statistics (``gammapy.stats``) (to be implemented, explains about likelihood, TS values, significance, ...)
- Source detection (``gammapy.detect``) (``detect_ts.ipynb``, ``cwt.ipynb``)
- Source catalogs (``gammapy.catalog``) (to be implemented)

Extra Topics
~~~~~~~~~~~~

More specialised, in some cases lower quality, will have to discuss what to improve
and what to remove (to be brought back later, in 2020, when quality is better).

- MCMC sampling (``mcmc_sampling.ipynb``)
- Dark matter models (``gammapy.astro.darkmatter``) (``astro_dark_matter.ipynb``)
- Dark matter analysis (to be implemented)
- Pulsar analysis (``pulsar_analysis.ipynb``)
- Source population modelling (``gammapy.astro.population``) (``source_population_model.ipynb``)
- Background model making (``background_model.ipynb``)
- Sherpa for Gammapy users (``image_fitting_with_sherpa.ipynb``, ``spectrum_fitting_with_sherpa.ipynb``)?
- HGPS data (``hgps.ipynb``)

Basics
~~~~~~

Leave the basics section (https://docs.gammapy.org/0.14/tutorials.html#basics)
at the end of the tutorials page, pretty much as-is.

Alternatives
============

We could try to change to a purely Jupyter notebook maintained documentation
(e.g. the "Python Data Science Handbook" is written just as Jupyter notebooks).
Or we could change documentation system and write all documentation as RST or MD,
and then have a documentation processor that auto-generates notebooks.
E.g. Jupytext does this, and partly e.g. the scikit-learn docs do that for their
tutorials, they maintain it in Python scripts and RST files.

There's a lot of ways to structure the documentation, or to put different focus.
Please send suggestions and feedback for the proposal above!

Outlook
=======

This is a short-term proposal, to quickly improve the Gammapy documentation
within the next 1-2 months, with the limited contributors we already have.

In early 2020, we should run a Gammapy user survey and gather feedback on the
Gammapy package and documentation. Examples of previous user surveys exist, e.g.
from CTA 1DC or the `Scipy documentation user survey`_, that we can use as
reference how to get useful feedback.

We should also try to attract or hire contributors to Gammapy that have a strong
interest in documentation. Once concrete idea could be to participate in `Google
season of docs`_, to get a junior technical writer for a few months, if someone
from the Gammapy team has time to work and mentor the project.

Another thing to keep in mind is that we should work towards a setup and
structure for the Gammapy package that support CTA as well as possible, and that
makes it easy for CTAO to choose and adapt Gammapy as prototype of the CTA
science tools and evolve and maintain it. This PIG doesn't propose a solution
for this, that's for later.

Implementation
==============

Implementing this PIG is a lot of work, roughly 2 months of full-time work. We
suggest that, after the PIG is accepted, one coordinator spends a few days to do
quick additions / removals / renames / rearrrangements, so that the structure of
the RST and IPYNB files we want is in place. Then the coordinator makes a wiki
page with a list of 20-30 tasks that should be done (each 1-2 days of work, not
longer) and asks for help. Each task is usually to edit one notebook or RST
page, and needs one author and one reviewer. It is then up to those two people
to coordinate their work: they can open a Github issue to discuss, or they can
just do a phone call or meet. Eventually there is a pull request and it's in a
state where both are happy, and it's merged in.

Documentation is a great way for new people to learn and contribute - please
help!

Decision
========

tbd

.. _GH 172: https://github.com/gammapy/gammapy/issues/172
.. _GH 241: https://github.com/gammapy/gammapy/issues/241
.. _GH 242: https://github.com/gammapy/gammapy/issues/242
.. _GH 1540: https://github.com/gammapy/gammapy/issues/1540
.. _GH 1577: https://github.com/gammapy/gammapy/issues/1577
.. _GH 1597: https://github.com/gammapy/gammapy/issues/1597
.. _GH 690: https://github.com/gammapy/gammapy/issues/690
.. _GH 2164: https://github.com/gammapy/gammapy/issues/2164
.. _GH 2175: https://github.com/gammapy/gammapy/issues/2175
.. _GH 2221: https://github.com/gammapy/gammapy/issues/2221
.. _GH 2463: https://github.com/gammapy/gammapy/pull/2463
.. _80-20 rule: https://en.wikipedia.org/wiki/Pareto_principle
.. _Scipy documentation user survey:  https://forms.gle/eK3x2ohJs1sLPJEk8
.. _Google season of docs: https://developers.google.com/season-of-docs/
.. _documentation principles: https://www.writethedocs.org/guide/writing/docs-principles/
.. _Gammapy changelog: https://docs.gammapy.org/dev/changelog.html
.. _pig-004: https://docs.gammapy.org/0.14/development/pigs/pig-004.html
.. _pig-012: https://docs.gammapy.org/0.14/development/pigs/pig-012.html
.. _pig-016: https://docs.gammapy.org/0.14/development/pigs/pig-016.html
.. _maps: https://docs.gammapy.org/0.14/maps/index.html
.. _modeling: https://docs.gammapy.org/0.14/modeling/index.html
.. _cube: https://docs.gammapy.org/0.14/cube/index.html
.. _ADASS XVIII proceedings: http://www.aspbooks.org/publications/523/357.pdf